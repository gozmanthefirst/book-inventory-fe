model User {
  id                 String                   @id @default(uuid())
  email              String                   @unique
  name               String?
  passwordHash       String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  emailVerified      Boolean                  @default(false)
  books              Book[]
  sessions           Session[]
  resetTokens        PasswordResetToken[]
  verificationTokens EmailVerificationToken[]
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @updatedAt
  ipAddress  String?
  userAgent  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([ipAddress])
  @@index([expires])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}
